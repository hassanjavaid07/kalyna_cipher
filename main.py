"""
@author: trident-10 (j_hassan)

Contains the main module for Kalyna encryption and decryption. In this file, test cases of the original paper are
implemented and checked in order to test this pythonic-implementation of the algorithm.

Original paper: DSTU 7624:2014 "A New Encryption Standard of Ukraine: The Kalyna Block Cipher".

This implementation is the property of the author. All rights reserved.
"""

from kalyna_process import *

rks_128_128 = {0: 0x16505E6B9B3AB1E6865B77DCE082A0F4, 1: 0xE6865B77DCE082A0F416505E6B9B3AB1,
               2: 0x7E70876EAE4984768AAAA00A7C93EC42, 3: 0x768AAAA00A7C93EC427E70876EAE4984,
               4: 0x45CED4C51E9140F53E7276820F0BD9FE, 5: 0xF53E7276820F0BD9FE45CED4C51E9140,
               6: 0x8C77EE227900C462515F66320560C4B1, 7: 0x62515F66320560C4B18C77EE227900C4,
               8: 0x0A9872E25CD2B0B8AA879A2086A66DD8, 9: 0xB8AA879A2086A66DD80A9872E25CD2B0,
               10: 0x5726B1A894DBC418F60BF3D5E8D74861}

rks_128_256 = {0: 0x57C816EB3F7E12DEED2C6B56E6B5BE1A,
               1: 0xDEED2C6B56E6B5BE1A57C816EB3F7E12,
               2: 0xD8069A7D889ACD80CD3184456CCCAE6F,
               3: 0x80CD3184456CCCAE6FD8069A7D889ACD,
               4: 0xC361CC973513411A82324D2B6742F3FE,
               5: 0x1A82324D2B6742F3FEC361CC97351341,
               6: 0x8310698C65CF80A409EF6FAABEB80F56,
               7: 0xA409EF6FAABEB80F568310698C65CF80,
               8: 0xC6D5C4C381461A7B034D691842901510,
               9: 0x7B034D691842901510C6D5C4C381461A,
               10: 0x84D0F82146C8BDF9B2B3707B4D49387E,
               11: 0xF9B2B3707B4D49387E84D0F82146C8BD,
               12: 0x43FADB28A0D1D42BBFF92FF9794546B3,
               13: 0x2BBFF92FF9794546B343FADB28A0D1D4,
               14: 0xC31EE8A87E2CED245A21A435FDB25B92
               }

rks_256_256 = {0: 0xF7DA2647DFD55B352F085208E30FCBA169B3C9DCC80DD7801F072CC16C942E36,
               1: 0x08E30FCBA169B3C9DCC80DD7801F072CC16C942E36F7DA2647DFD55B352F0852,
               2: 0xDF1F1158FD74EEA5C15531C9239038DB26839A9100031FCBB77CFD35F14F73C2,
               3: 0xC9239038DB26839A9100031FCBB77CFD35F14F73C2DF1F1158FD74EEA5C15531,
               4: 0xCA2AE58A5C656C0ACE0BF0A628FBA9FC3176E710FC11F75DEB9601F95C22FD12,
               5: 0xA628FBA9FC3176E710FC11F75DEB9601F95C22FD12CA2AE58A5C656C0ACE0BF0,
               6: 0x5157FCECC510404E44F5E76CF2F2CB80C29BEE53E310BE7DF816A49AEB175160,
               7: 0x6CF2F2CB80C29BEE53E310BE7DF816A49AEB1751605157FCECC510404E44F5E7,
               8: 0x5E1C15889B51862AA11DD2875781B8D10BD0A270AA4669B06B7A49B2473467EB,
               9: 0x875781B8D10BD0A270AA4669B06B7A49B2473467EB5E1C15889B51862AA11DD2,
               10: 0x3752265E1FA9E6AA082AA99931C8B67B0864DFE7946F4FEF7C5BAD7C9212DB02,
               11: 0x9931C8B67B0864DFE7946F4FEF7C5BAD7C9212DB023752265E1FA9E6AA082AA9,
               12: 0x38A743D67F8838BE74D17E6C1734E7C52BC87D984406B60679A71C17F9BA8F3B,
               13: 0x6C1734E7C52BC87D984406B60679A71C17F9BA8F3B38A743D67F8838BE74D17E,
               14: 0xFC69B1A735C1CA491850EBBB88D6FCAC5D7616165C109C31F13144C5B825EA02
               }

rks_256_512 = {0: 0xF7BD9738CE49DDA80B9ABD79801EE8218860FE42475C9F565CD8F433B4C989C4,
               1: 0x79801EE8218860FE42475C9F565CD8F433B4C989C4F7BD9738CE49DDA80B9ABD,
               2: 0x400B80A3E5EE106402037E6445A8C043C025BC83FB4294B0A03392A1F20BCAD2,
               3: 0x6445A8C043C025BC83FB4294B0A03392A1F20BCAD2400B80A3E5EE106402037E,
               4: 0xD011D865E1E63E78353CDCE9F6E131E66F7AAF50A301148798CD52A4004CD904,
               5: 0xE9F6E131E66F7AAF50A301148798CD52A4004CD904D011D865E1E63E78353CDC,
               6: 0xB29987F5AEDC7C5049872A92B4D70DD06ECB5266D3774630F330F21BBBB21C45,
               7: 0x92B4D70DD06ECB5266D3774630F330F21BBBB21C45B29987F5AEDC7C5049872A,
               8: 0x535BC565CE0838DF30FC6AB4D7D11CC71DF00EB1A3C796AC1469E8C6CE80238D,
               9: 0xB4D7D11CC71DF00EB1A3C796AC1469E8C6CE80238D535BC565CE0838DF30FC6A,
               10: 0x575458552EB47D9C6246F01AF15E077FCD97D8C55BC8365F3798FE37B8947898,
               11: 0x1AF15E077FCD97D8C55BC8365F3798FE37B8947898575458552EB47D9C6246F0,
               12: 0xAE10A655AFA56FDD369FDEAD237BDBC9B9CFB69D14A777624774969AB2022675,
               13: 0xAD237BDBC9B9CFB69D14A777624774969AB2022675AE10A655AFA56FDD369FDE,
               14: 0x3BA763DCCAF841C59B138A7957447C95CB026165A9DCA04A5D7092BB878B24F5,
               15: 0x7957447C95CB026165A9DCA04A5D7092BB878B24F53BA763DCCAF841C59B138A,
               16: 0x19BE451A213F473E9D5D8713962D5CDEE7367B3C3E7F37C96EABA307F3790E79,
               17: 0x13962D5CDEE7367B3C3E7F37C96EABA307F3790E7919BE451A213F473E9D5D87,
               18: 0x5BCA123F021A45E1156112092D5E3472E9EDEBA57989919BDEAC86FFEE59CA23
               }

rks_512_512 = {
    0: 0x1947C0FCF2C8D64CB256FB722DA8E24188EABF026130064F03E0F2BD4CA854C9A848BE6445FECF00510ADE0C1C4D43F1073D53B163DF01DF01317E9552F262E5,
    1: 0x026130064F03E0F2BD4CA854C9A848BE6445FECF00510ADE0C1C4D43F1073D53B163DF01DF01317E9552F262E51947C0FCF2C8D64CB256FB722DA8E24188EABF,
    2: 0x2408F2FA312A9374A300773C06BC7C57E369A136ECE1D879C2DFA2A30349F5B8235CD21701AB035C23BF1BF30F8DE233E0F83AC94DF8012703BE4B8A07DA0D56,
    3: 0x36ECE1D879C2DFA2A30349F5B8235CD21701AB035C23BF1BF30F8DE233E0F83AC94DF8012703BE4B8A07DA0D562408F2FA312A9374A300773C06BC7C57E369A1,
    4: 0xB8DF3967A97C8BFD5C4DECEC5168EEB40BEE562D80D97AD60998659CCD084D5DC33441F000BF7AFAEEEBE431F96D67DEA0E05A5BFFF8B0AA9A38C9857A91EA23,
    5: 0x2D80D97AD60998659CCD084D5DC33441F000BF7AFAEEEBE431F96D67DEA0E05A5BFFF8B0AA9A38C9857A91EA23B8DF3967A97C8BFD5C4DECEC5168EEB40BEE56,
    6: 0x7AB62677AAA05AC35BF994861CA08380058651FB824351FCD684B5DD229F82EB3ACFCDFD660698EEB922C62D097D68680375512C6960E6EA974A53A7C159DBA3,
    7: 0xFB824351FCD684B5DD229F82EB3ACFCDFD660698EEB922C62D097D68680375512C6960E6EA974A53A7C159DBA37AB62677AAA05AC35BF994861CA08380058651,
    8: 0x0B41893222373E1053852CE52AECAAA6D56AD4BB87D2771FB7FE9EB2B4BA760739F0DB9731E9F802E821E1BD930060E1FC38253AD84043C78FFE6A9AA5856282,
    9: 0xBB87D2771FB7FE9EB2B4BA760739F0DB9731E9F802E821E1BD930060E1FC38253AD84043C78FFE6A9AA58562820B41893222373E1053852CE52AECAAA6D56AD4,
    10: 0xB253F7958C9781BBC97F923194B2A4FAF3950141E3D2E39C27D7846C8B0AFDFF10E0EDA1E34515415844E5D7CCC409F1AF08B30428D74108AE1339748912EE52,
    11: 0x41E3D2E39C27D7846C8B0AFDFF10E0EDA1E34515415844E5D7CCC409F1AF08B30428D74108AE1339748912EE52B253F7958C9781BBC97F923194B2A4FAF39501,
    12: 0x9C3B87B9EC223BC65BF1A4153B6FA7DA62B9B72AFCEA375F34CD656C4857294F0601C04788B80F27C19D7EE1FB81B710CF7F61BD66447F10E34CDA0E63E32104,
    13: 0x2AFCEA375F34CD656C4857294F0601C04788B80F27C19D7EE1FB81B710CF7F61BD66447F10E34CDA0E63E321049C3B87B9EC223BC65BF1A4153B6FA7DA62B9B7,
    14: 0x39E087E636B3E6949C744EACB4DDCF4E603C95652731D549E70C5200F1D95095B04E404E675B56F93CBEC44AF7512C388E1A3DDEFBBC8C30FADE3BDCFDB12BF4,
    15: 0x652731D549E70C5200F1D95095B04E404E675B56F93CBEC44AF7512C388E1A3DDEFBBC8C30FADE3BDCFDB12BF439E087E636B3E6949C744EACB4DDCF4E603C95,
    16: 0xE0FC0D1B3FE4FBC87FAC3DB5112BCB96D8F23E593F85C1CC45D9D2AA23DC4D056C6FEB08C3341F8BAF7AE2F89B2B5943549E109F03281BB8B91ED201C1E4012E,
    17: 0x593F85C1CC45D9D2AA23DC4D056C6FEB08C3341F8BAF7AE2F89B2B5943549E109F03281BB8B91ED201C1E4012EE0FC0D1B3FE4FBC87FAC3DB5112BCB96D8F23E,
    18: 0x837AD9989E09D091AB2E5EA4D883A0576EA81475C90233DBBD5237309722E85AA35128208B41674A9067282F8151C4A8685ABDBCB3E7A37D1862BAB6ADA86B24
}

cases = dict()
# -----------------------------------------------------------------
# Parameters of Kalyna Object for encrypt/decrypt/key-expansion
# l = Block size
# k = Key Length
# t = Num Rounds
# c = Rows of state matrix
# -----------------------------------------------------------------
# Case 1: (l/k) 128/128
cases[1] = {"params": (128, 128, 10, 2),
            "e_key": 0x0F0E0D0C0B0A09080706050403020100,
            "d_key": 0x000102030405060708090A0B0C0D0E0F,
            "init_state": 0x05,
            "rks_out": rks_128_128,
            "p_text": 0x1F1E1D1C1B1A19181716151413121110,
            "c_text": 0x101112131415161718191A1B1C1D1E1F,
            "c_text_out": 0x81BF1C7D779BAC20E1C9EA39B4D2AD06,
            "p_text_out": 0x7291EF2B470CC7846F09C2303973DAD7}

# Case 2: (l/k) 128/256
cases[2] = {"params": (128, 256, 14, 2),
            "e_key": 0x1F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100,
            "d_key": 0x000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F,
            "init_state": 0x07,
            "rks_out": rks_128_256,
            "p_text": 0x2F2E2D2C2B2A29282726252423222120,
            "c_text": 0x202122232425262728292A2B2C2D2E2F,
            "c_text_out": 0x58EC3E091000158A1148F7166F334F14,
            "p_text_out": 0xF36DB456CEFDDFE1B45B5F7030CAD996}

# Case 3: (l/k) 256/256
cases[3] = {"params": (256, 256, 14, 4),
            "e_key": 0x1F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100,
            "d_key": 0x000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F,
            "init_state": 0x09,
            "rks_out": rks_256_256,
            "p_text": 0x3F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120,
            "c_text": 0x202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F,
            "c_text_out": 0xF66E3D570EC92135AEDAE323DCBD2A8CA03963EC206A0D5A88385C24617FD92C,
            "p_text_out": 0x7FC5237896674E8603C1E9B03F8B4BA3AB5B7C592C3FC3D361EDD12586B20FE3}

# Case 4: (l/k) 256/512
cases[4] = {"params": (256, 512, 18, 4),
            "e_key": 0x3F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100,
            "d_key": 0x000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F,
            "init_state": 0x0D,
            "rks_out": rks_256_512,
            "p_text": 0x5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140,
            "c_text": 0x404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F,
            "c_text_out": 0x606990E9E6B7B67A4BD6D893D72268B78E02C83C3CD7E102FD2E74A8FDFE5DD9,
            "p_text_out": 0x18317A2767DAD482BCCD07B9A1788D075E7098189E5F84972D0B916D79BA6AE0}

# Case 5: (l/k) 512/512
cases[5] = {"params": (512, 512, 18, 8),
            "e_key": 0x3F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100,
            "d_key": 0x000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F,
            "init_state": 0x11,
            "rks_out": rks_512_512,
            "p_text": 0x7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140,
            "c_text": 0x404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F,
            "c_text_out": 0x4A26E31B811C356AA61DD6CA0596231A67BA8354AA47F3A13E1DEEC320EB56B895D0F417175BAB662FD6F134BB15C86CCB906A26856EFEB7C5BC6472940DD9D9,
            "p_text_out": 0xCE80843325A052521BEAD714E6A9D829FD381E0EE9A845BD92044554D9FA46A3757FEFDB853BB1F297FF9D833B75E66AAF4157ABB5291BDCF094BB13AA5AFF22
}

start_time = time.time()

# For checking individual check cases if needed.
no = 2  # Test case number
params = cases[no]["params"]
enc_key = cases[no]["e_key"]
dec_key = cases[no]["d_key"]
state_0 = cases[no]["init_state"]
ptx = cases[no]["p_text"]
ctx = cases[no]["c_text"]
rks = KalynaKeyExpansion(params, enc_key, state_0)

for j in range(1, len(cases)+1, 1):
    params = cases[j]["params"]
    enc_key = cases[j]["e_key"]
    state_0 = cases[j]["init_state"]
    rks = KalynaKeyExpansion(params, enc_key, state_0)
    for i in range(len(rks)):
        # print_byte(rks[i])
        assert int(to_words(rks[i]), 16) == cases[j]["rks_out"][i], "Failure in Round key # {}:".format(i)
        print("Checking case # {}. Checked round key # {}. Status OK!".format(j, i))
    print("---------------- Checked RK case # {}. Status is OK! ---------------------\n".format(j))

for i in range(1,len(cases)+1,1):
    params = cases[i]["params"]
    enc_key = cases[i]["e_key"]
    dec_key = cases[i]["d_key"]
    state_0 = cases[i]["init_state"]
    ptx = cases[i]["p_text"]
    ctx = cases[i]["c_text"]
    assert int(to_words(KalynaEncrypt(params, ptx, enc_key, state_0)), 16) == cases[i]["c_text_out"], \
        "Failure in Encrypt Case # {}:".format(i)
    assert int(to_words(KalynaDecrypt(params, ctx, dec_key, state_0)), 16) == cases[i]["p_text_out"], \
        "Failure in Decrypt Case # {}:".format(i)
    print("Checked enc./dec. case # {}. Status OK!".format(i))


print("--- %.6f seconds ---" % (time.time() - start_time))
